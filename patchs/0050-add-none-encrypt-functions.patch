From a476cc66e5a2f2f278f083af3b8de7ecb87f8dba Mon Sep 17 00:00:00 2001
From: jnxyatmjx <jnxyatmjx@qq.com>
Date: Fri, 31 Mar 2023 17:58:41 +0800
Subject: [PATCH 50/85] add none encrypt functions

---
 src/CMakeLists.txt |  1 +
 src/crypto.c       | 21 ++++++++++++++++++
 src/none.c         | 54 ++++++++++++++++++++++++++++++++++++++++++++++
 src/none.h         | 32 +++++++++++++++++++++++++++
 4 files changed, 108 insertions(+)
 create mode 100644 src/none.c
 create mode 100644 src/none.h

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 9ca9d85..6769ef6 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -18,6 +18,7 @@ set(SS_CRYPTO_SOURCE
         aead.c
         stream.c
         base64.c
+        none.c
         )
 
 set(SS_PLUGIN_SOURCE
diff --git a/src/crypto.c b/src/crypto.c
index b44d867..a0ce28a 100644
--- a/src/crypto.c
+++ b/src/crypto.c
@@ -42,6 +42,7 @@
 #include "aead.h"
 #include "utils.h"
 #include "ppbloom.h"
+#include "none.h"
 
 int
 balloc(buffer_t *ptr, size_t capacity)
@@ -196,6 +197,26 @@ crypto_init(const char *password, const char *key, const char *method)
             memcpy(crypto, &tmp, sizeof(crypto_t));
             return crypto;
         }
+
+        // none encrytp
+        {
+            cipher_t *cipher = none_init(password, key, method);
+            if (cipher == NULL)
+                return NULL;
+            crypto_t *crypto = (crypto_t *)ss_malloc(sizeof(crypto_t));
+            crypto_t tmp     = {
+                .cipher      = cipher,
+                .encrypt_all = &none_encrypt_all,
+                .decrypt_all = &none_decrypt_all,
+                .encrypt     = &none_encrypt,
+                .decrypt     = &none_decrypt,
+                .ctx_init    = &none_ctx_init,
+                .ctx_release = &none_ctx_release,
+            };
+            memcpy(crypto, &tmp, sizeof(crypto_t));
+            LOGI("None ciphers just fly youself.");
+            return crypto;
+        }
     }
 
     LOGE("invalid cipher name: %s", method);
diff --git a/src/none.c b/src/none.c
new file mode 100644
index 0000000..10a189a
--- /dev/null
+++ b/src/none.c
@@ -0,0 +1,54 @@
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+#include "none.h"
+#include "utils.h"
+
+int none_encrypt_all(buffer_t *plaintext, cipher_t *cipher, size_t capacity)
+{
+#ifdef SS_DEBUG
+    dump("PLAIN", plaintext->data, plaintext->len);
+#endif
+    return 0;
+}
+
+int none_decrypt_all(buffer_t *ciphertext, cipher_t *cipher, size_t capacity)
+{
+#ifdef SS_DEBUG
+    dump("CIPHER", ciphertext->data, ciphertext->len);
+#endif
+    return 0;
+}
+
+int none_encrypt(buffer_t *plaintext, cipher_ctx_t *cipher_ctx, size_t capacity)
+{
+#ifdef SS_DEBUG
+    dump("PLAIN", plaintext->data, plaintext->len);
+#endif
+    return 0;
+}
+
+int none_decrypt(buffer_t *ciphertext, cipher_ctx_t *cipher_ctx, size_t capacity)
+{
+#ifdef SS_DEBUG
+    dump("CIPHER", ciphertext->data, ciphertext->len);
+#endif
+    return 0;
+}
+
+void none_ctx_init(cipher_t *cipher, cipher_ctx_t *cipher_ctx, int enc)
+{
+    return ;
+}
+
+void none_ctx_release(cipher_ctx_t *cipher_ctx)
+{
+    return ;
+}
+
+cipher_t *none_init(const char *pass, const char *key, const char *method)
+{
+    cipher_t *cipher = (cipher_t *)ss_malloc(sizeof(cipher_t));
+    memset(cipher, 0, sizeof(cipher_t));
+    return cipher;
+}
diff --git a/src/none.h b/src/none.h
new file mode 100644
index 0000000..cd6906c
--- /dev/null
+++ b/src/none.h
@@ -0,0 +1,32 @@
+#ifndef _NONEX_H
+#define _NONEX_H
+
+#ifndef __MINGW32__
+#include <sys/socket.h>
+#endif
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+#ifdef HAVE_STDINT_H
+#include <stdint.h>
+#elif HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
+
+#include <sodium.h>
+#define STREAM_CIPHER_NUM          21
+
+#include "crypto.h"
+
+int none_encrypt_all(buffer_t *, cipher_t *, size_t);
+int none_decrypt_all(buffer_t *, cipher_t *, size_t);
+int none_encrypt(buffer_t *, cipher_ctx_t *, size_t);
+int none_decrypt(buffer_t *, cipher_ctx_t *, size_t);
+
+void none_ctx_init(cipher_t *, cipher_ctx_t *, int);
+void none_ctx_release(cipher_ctx_t *);
+
+cipher_t *none_init(const char *pass, const char *key, const char *method);
+
+#endif //_NONEX_H
\ No newline at end of file
-- 
2.25.1

